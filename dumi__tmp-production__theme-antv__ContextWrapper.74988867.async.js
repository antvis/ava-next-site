"use strict";(self.webpackChunk_antv_ava_site=self.webpackChunk_antv_ava_site||[]).push([[2643],{11698:function(n,e,t){t.d(e,{w:function(){return a}});var a=(0,t(67294).createContext)({})},4200:function(n,e,t){t.r(e),t.d(e,{default:function(){return r}});t(67294);var a=t(85956),s=t(11698),i=t(85893);function r(){var n=(0,a.pC)();return(0,i.jsx)(s.w.Provider,{value:{meta:{exampleTopics:[{id:"components",title:{zh:"React 组件",en:"React Components"},examples:[],childrenKey:"examples"},{id:"data-wizard",title:{zh:"数据处理（DataWizard）",en:"DataWizard"},examples:[{demos:[{id:"df",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/4qbDDKfhu2/DataFrame.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Input, Alert } from 'antd';\nimport { DataFrame } from '@antv/ava';\nimport ReactJson from 'react-json-view';\n\nconst { TextArea } = Input;\n\nconst App = () => {\n  const [data, setData] = useState([\n    { city: 'Shanghai', population: 24281400 },\n    { city: 'Chengdu', population: 20938000 },\n    { city: 'Hangzhou', population: 11936010 },\n    { city: 'Beijing', population: 21893000 },\n    { city: 'Chongqing', population: 30170000 },\n    { city: 'Changsha', population: 10047914 },\n    { city: 'Wuhan', population: 11212000 },\n    { city: 'Nanchang', population: 6255000 },\n    { city: 'Lanzhou', population: 3319200 },\n    { city: 'Guangzhou', population: 18676600 },\n  ]);\n  const [textAreaValue, setTextAreaValue] = useState(JSON.stringify(data));\n  const [errorMessage, setErrorMessage] = useState('');\n  const df = new DataFrame(data);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '8px',\n          height: '32px',\n        }}\n      >\n        <h3 style={{ marginBottom: 0 }}>Data</h3>\n        {errorMessage ? <Alert message={errorMessage} style={{ padding: '4px' }} type=\"error\" closable /> : null}\n      </div>\n      <TextArea\n        style={{ resize: 'none', height: '120px' }}\n        value={textAreaValue}\n        onChange={(e) => {\n          const newValue = e.target.value;\n          try {\n            const newData = JSON.parse(newValue);\n            setData(newData);\n            setErrorMessage('');\n          } catch {\n            setErrorMessage('Please input standard JSON');\n          } finally {\n            setTextAreaValue(newValue);\n          }\n        }}\n      />\n      <Divider />\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>DF Structure</h3>\n          <div style={{ height: '300px', overflowY: 'scroll', border: '2px solid #eee', padding: '20px' }}>\n            <ReactJson src={df} collapsed={1} />\n          </div>\n        </div>\n        <div style={{ flexBasis: '300px' }}>\n          <h3>Tabular DF data</h3>\n          <div\n            style={{ width: '300px', height: '300px', overflow: 'scroll', border: '2px solid #eee', padding: '20px' }}\n          >\n            <pre>{df.toString()}</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"读取数据",en:"Read data"},filename:"df.jsx",isNew:!1},{id:"info",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/BTQp84MnNH/DF-info.gif",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Divider, Input, Alert } from 'antd';\nimport { DataFrame } from '@antv/ava';\nimport ReactJson from 'react-json-view';\n\nconst { TextArea } = Input;\n\nconst App = () => {\n  const [data, setData] = useState([\n    { city: 'Shanghai', population: 24281400 },\n    { city: 'Chengdu', population: 20938000 },\n    { city: 'Hangzhou', population: 11936010 },\n    { city: 'Beijing', population: 21893000 },\n    { city: 'Chongqing', population: 30170000 },\n    { city: 'Changsha', population: 10047914 },\n    { city: 'Wuhan', population: 11212000 },\n    { city: 'Nanchang', population: 6255000 },\n    { city: 'Lanzhou', population: 3319200 },\n    { city: 'Guangzhou', population: 18676600 },\n  ]);\n  const [textAreaValue, setTextAreaValue] = useState(JSON.stringify(data));\n  const [errorMessage, setErrorMessage] = useState('');\n  const df = new DataFrame(data);\n\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '8px',\n          height: '32px',\n        }}\n      >\n        <h3 style={{ marginBottom: 0 }}>Data</h3>\n        {errorMessage ? <Alert message={errorMessage} style={{ padding: '4px' }} type=\"error\" closable /> : null}\n      </div>\n      <TextArea\n        style={{ resize: 'none', height: '120px' }}\n        value={textAreaValue}\n        onChange={(e) => {\n          const newValue = e.target.value;\n          try {\n            const newData = JSON.parse(newValue);\n            setData(newData);\n            setErrorMessage('');\n          } catch {\n            setErrorMessage('Please input standard JSON');\n          } finally {\n            setTextAreaValue(newValue);\n          }\n        }}\n      />\n      <Divider />\n      <h3>Field Information (df.info())</h3>\n      <div style={{ height: '300px', overflowY: 'scroll', border: '2px solid #eee', padding: '20px' }}>\n        <ReactJson src={df.info()} collapsed={1} />\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"数据字段分析",en:"Data field analysis"},filename:"info.jsx",isNew:!1}],icon:"",id:"data-frame",title:{en:"DataFrame",zh:"DataFrame 示例"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"ckb",title:{zh:"图表知识库（CKB)",en:"Chart Knowledge Base (CKB)"},examples:[{demos:[{id:"chartdic",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*TOjFQ6PQwyEAAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport Thumbnails from '@antv/thumbnails';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport { Popover } from 'antd';\n// import\nimport { ckb } from '@antv/ava';\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nconst myCkb = ckb();\n\nconst ViewAll = () =>\n  chartTypeList.map((item) => {\n    const { name, alias, def, purpose, coord, shape, channel } = myCkb[item];\n\n    const content = (\n      <div>\n        <h3>{name}</h3>\n        <h4>Alias</h4>\n        <p>\n          <small>{alias.toString() || '-'}</small>\n        </p>\n        <h4>Definition</h4>\n        <p>\n          <small>{def || '-'}</small>\n        </p>\n        <h4>Purposes</h4>\n        <p>\n          <small>{purpose.toString() || '-'}</small>\n        </p>\n        <h4>Coordinate</h4>\n        <p>\n          <small>{coord.toString() || '-'}</small>\n        </p>\n        <h4>Shape</h4>\n        <p>\n          <small>{shape.toString() || '-'}</small>\n        </p>\n        <h4>Channels</h4>\n        <p>\n          <small>{channel.toString() || '-'}</small>\n        </p>\n      </div>\n    );\n\n    return (\n      <div\n        className=\"grid\"\n        style={{\n          display: 'inline-block',\n          margin: '6px',\n          border: '1px solid LightSteelBlue',\n        }}\n        key={item}\n      >\n        <Popover\n          placement=\"right\"\n          content={content}\n          overlayStyle={{ maxWidth: '300px' }}\n          mouseLeaveDelay={0}\n          arrowPointAtCenter\n        >\n          <div className=\"thumbnail\" style={{ textAlign: 'center' }}>\n            <Thumbnail chart={item} style={{ margin: '4px', width: '140px', height: '140px' }} />\n          </div>\n        </Popover>\n      </div>\n    );\n  });\n\nReactDOM.render(<ViewAll />, document.getElementById('container'));\n",title:{zh:"使用 CKB 制作图表词典",en:"Chart Dictionary by CKB"},filename:"chartdic.jsx",isNew:!1}],icon:"",id:"CKBJson",title:{en:"CKB Application",zh:"CKB 的应用"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"advisor",title:{zh:"图表推荐（Advisor）",en:"ChartAdvisor"},examples:[{demos:[{id:"ca-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/SuynCPdHr/ca-steps.gif",source:"import React from 'react';\n\nimport { CaretDownOutlined } from '@ant-design/icons';\n// import\nimport { Advisor } from '@antv/ava';\nimport { Dropdown, Menu, Radio } from 'antd';\nimport { ChartView, JSONView, LintCard, StepBar, TableView } from 'antv-site-demo-rc';\nimport ReactDOM from 'react-dom';\n\nconst myChartAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { price: 100, type: 'A' },\n  { price: 120, type: 'B' },\n  { price: 150, type: 'C' },\n];\n\nconst dataRadioOptions = [\n  { label: 'JSON', value: 'JSON' },\n  { label: 'Table', value: 'Table' },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      data: defaultData,\n      results: myChartAdvisor.advise({ data: defaultData }).map((advice) => {\n        const lints = myChartAdvisor.lint({ spec: advice.spec });\n        return { ...advice, lint: lints };\n      }),\n      currentResult: 0,\n      dataRadioValue: 'Table',\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  onDataRadioChange = (e) => {\n    this.setState({\n      dataRadioValue: e.target.value,\n    });\n  };\n\n  onAdviceMenuClick = (e) => {\n    const index = parseInt(e.key.split('-')[0], 10);\n    this.setState({\n      currentResult: index,\n    });\n  };\n\n  render() {\n    const { currentStep, results, currentResult, data, dataRadioValue } = this.state;\n\n    const dataContent = (\n      <>\n        <Radio.Group\n          options={dataRadioOptions}\n          onChange={this.onDataRadioChange}\n          value={dataRadioValue}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n        {dataRadioValue === 'Table' ? <TableView data={data} tableWidth={200} /> : <JSONView json={data} />}\n      </>\n    );\n    const advicesMenu = (\n      <Menu onClick={this.onAdviceMenuClick} selectedKeys={[currentResult]}>\n        {(results || []).map((item, index) => {\n          return <Menu.Item key={`${index}-${item.type}`}>{`${index}: ${item.type}`}</Menu.Item>;\n        })}\n      </Menu>\n    );\n\n    const resultContent = (\n      <>\n        <Dropdown menu={advicesMenu} placement=\"bottomLeft\" trigger={['click']} disabled={!results}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            {!results ? 'no advice' : `Advice ${currentResult}`} <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <JSONView json={results[currentResult]} />\n      </>\n    );\n\n    const plotContent = (\n      <>\n        <LintCard lintProblems={results[currentResult].lint} />\n        <ChartView chartRef={this.myRef} spec={results[currentResult].spec} />\n      </>\n    );\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Data',\n        desc: 'Source data:',\n        content: dataContent,\n      },\n      {\n        title: 'Results',\n        desc: 'Advices with lint recommended from data:',\n        content: resultContent,\n      },\n      {\n        title: 'Chart',\n        desc: 'Render chart but you also know the limits.',\n        content: plotContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Data to ChartAdvisor",zh:"从数据到 ChartAdvisor 推荐/优化图表"},filename:"ca-steps.jsx",isNew:!1},{id:"ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/KrLqirDT8/ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst defaultData = [\n  { price: 100, type: 'A' },\n  { price: 120, type: 'B' },\n  { price: 150, type: 'C' },\n];\n\n// usage\nconst myChartAdvisor = new Advisor();\nconst results = myChartAdvisor.advise({ data: defaultData });\n\nconst App = () => (\n  <PagList\n    data={results}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic ChartAdvisor",zh:"ChartAdvisor 基础用法"},filename:"ca.jsx",isNew:!1},{id:"custom-ckb-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/AZeiW7T8o/custom-ckb-ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst trickyData = [\n  { nom1: 'A', nom2: 'apple', nom3: 'red' },\n  { nom1: 'B', nom2: 'banana', nom3: 'yellow' },\n  { nom1: 'C', nom2: 'carrot', nom3: 'orange' },\n];\n\n// custom chart\nconst triNominalChart = {\n  id: 'trinominal_chart',\n  name: 'TriNominal Chart',\n  alias: ['three cate chart'],\n  family: ['MultiNominalCharts'],\n  def: 'This chart takes three nominal fields for encoding.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Square'],\n  dataPres: [{ minQty: 3, maxQty: 3, fieldConditions: ['Nominal'] }],\n  channel: ['Position', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toTriNominal = (data, dataProps) => {\n  const field4X = dataProps[0];\n  const field4Y = dataProps[1];\n  const field4Color = dataProps[2];\n\n  if (!field4X || !field4Y || !field4Color) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'rect',\n        encoding: {\n          x: {\n            field: field4X.name,\n            type: 'nominal',\n          },\n          color: {\n            field: field4Color.name,\n            type: 'nominal',\n          },\n          y: {\n            field: field4Y.name,\n            type: 'nominal',\n          },\n        },\n      },\n    ],\n  };\n\n  return spec;\n};\n\ntriNominalChart.toSpec = toTriNominal;\n\n// custom CKB config\nconst myCKBCfg = {\n  include: ['line_chart', 'pie_chart'], // only include 2 of origin charts\n  custom: { trinominal_chart: triNominalChart }, // and a custom chart\n};\n\n// usage\nconst myChartAdvisor = new Advisor({ ckbCfg: myCKBCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList data={results} renderItem={(item) => <JSONView json={item} rjvConfigs={{ collapsed: 1 }} />} />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的 CKB"},filename:"custom-ckb-ca.jsx",isNew:!1},{id:"custom-rules-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lEJg8nD9R/custom-rules-ca.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst trickyData = [\n  { price: 520, year: 2005 },\n  { price: 600, year: 2006 },\n  { price: 1500, year: 2007 },\n];\n\n// The data above should has a line chart as an advice.\n// But, assume we don't like any line chart with a 'year' field:\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myChartAdvisor = new Advisor({ ruleCfg: myRuleCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList data={results} renderItem={(item) => <JSONView json={item} rjvConfigs={{ collapsed: 1 }} />} />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的规则"},filename:"custom-rules-ca.jsx",isNew:!1},{id:"custom-ckb-rules-ca",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Rw0cVZ%26ZW/custom-ckb-rules-ca.gif",source:"import React, { useRef, useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, JSONView, StepBar, TableView, PagList } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst trickyData = [\n  { field1: 'A', field2: 10 },\n  { field1: 'B', field2: 10 },\n  { field1: 'C', field2: 10 },\n];\n\n// custom chart\nconst ironBallChart = {\n  id: 'ironball_chart',\n  name: 'IronBall Chart',\n  alias: ['solidball'],\n  family: ['PieCharts'],\n  def: 'A funny chart.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Round'],\n  dataPres: [\n    { minQty: 1, maxQty: '*', fieldConditions: ['Nominal'] },\n    { minQty: 1, maxQty: '*', fieldConditions: ['Interval'] },\n  ],\n  channel: ['Angle', 'Area', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toIronball = (data, dataProps) => {\n  const fieldInterval = dataProps.find((field) => field.levelOfMeasurements.includes('Interval'));\n  const fieldNominal = dataProps.find((field) => field.levelOfMeasurements.includes('Nominal'));\n\n  if (!fieldInterval) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'arc',\n        encoding: {\n          theta: {\n            field: fieldInterval.name,\n            type: 'quantitative',\n          },\n        },\n      },\n    ],\n  };\n\n  if (fieldNominal) {\n    spec.layer[0].encoding.color = {\n      field: fieldNominal.name,\n      type: 'quantitative',\n      scale: {\n        range: ['#686971'],\n      },\n    };\n  }\n\n  return spec;\n};\n\nironBallChart.toSpec = toIronball;\n\n// custom CKB config\nconst myCKBCfg = {\n  custom: { ironball_chart: ironBallChart },\n};\n\n// custom rule\nconst myRule = {\n  id: 'same-value-ironball',\n  type: 'SOFT',\n  docs: {\n    lintText: 'I just like ironball while values of measure are all same.',\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'ironball_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const measureFieldProps = dataProps.find((field) => field.levelOfMeasurements.includes('Interval'));\n\n    if (!measureFieldProps || measureFieldProps.distinct !== 1) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'same-value-ironball': myRule,\n  },\n};\n\n// usage\nconst myChartAdvisor = new Advisor({ ckbCfg: myCKBCfg, ruleCfg: myRuleCfg });\n\nconst results = myChartAdvisor.advise({ data: trickyData });\n\nconst App = () => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const myRef = useRef();\n\n  const onStepChange = (step) => {\n    setCurrentStep(step);\n  };\n\n  const ckbContent = (\n    <>\n      const myCKBCfg =\n      <JSONView json={myCKBCfg} rjvConfigs={{ collapsed: 3 }} />\n    </>\n  );\n\n  const ruleContent = (\n    <>\n      const myRuleCfg =\n      <JSONView json={myRuleCfg} rjvConfigs={{ collapsed: 3 }} />\n    </>\n  );\n\n  const resultContent = (\n    <>\n      data:\n      <TableView data={trickyData} s2Configs={{ adaptive: true }} tableWidth={260} style={{ height: 140 }} />\n      <br />\n      results:\n      <PagList\n        data={results}\n        renderItem={(item) => <JSONView json={item} style={{ height: 300 }} rjvConfigs={{ collapsed: 2 }} />}\n      />\n      <br />\n      top1 chart:\n      <ChartView chartRef={myRef} spec={results[0].spec} />\n      <br />\n    </>\n  );\n\n  const steps = [\n    {\n      title: 'myCKB',\n      desc: 'Define your chart as a CKB object. Define the `toSpec` function to compile that chart. Add your custom chart to CKB.',\n      content: ckbContent,\n    },\n    {\n      title: 'myRules',\n      desc: 'Define your rule and add it into Advisor.',\n      content: ruleContent,\n    },\n    {\n      title: 'result',\n      desc: 'Results of your custom system:',\n      content: resultContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={onStepChange} steps={steps} />\n\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        {steps[currentStep].content}\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB and rules for ChartAdvisor",zh:"定制 ChartAdvisor 所使用的 CKB 和规则"},filename:"custom-ckb-rules-ca.jsx",isNew:!1}],icon:"",id:"advise-and-lint",title:{en:"ChartAdvisor - advise and lint",zh:"完整使用 ChartAdvisor"},childrenKey:"demos",order:0},{demos:[{id:"advisor-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/HkgFEc28b/advisor-steps.gif",source:"import React from 'react';\n\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport { Advisor } from '@antv/ava';\nimport { Dropdown, Menu, Radio } from 'antd';\nimport { ChartView, JSONView, StepBar, TableView } from 'antv-site-demo-rc';\nimport ReactDOM from 'react-dom';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\nconst dataRadioOptions = [\n  { label: 'JSON', value: 'JSON' },\n  { label: 'Table', value: 'Table' },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      data: defaultData,\n      advices: myAdvisor.advise({ data: defaultData }),\n      currentAdvice: 0,\n      dataRadioValue: 'Table',\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  onDataRadioChange = (e) => {\n    this.setState({\n      dataRadioValue: e.target.value,\n    });\n  };\n\n  onAdviceMenuClick = (e) => {\n    const index = parseInt(e.key.split('-')[0], 10);\n    this.setState({\n      currentAdvice: index,\n    });\n  };\n\n  render() {\n    const { currentStep, advices, currentAdvice, data, dataRadioValue } = this.state;\n\n    const dataContent = (\n      <>\n        <Radio.Group\n          options={dataRadioOptions}\n          onChange={this.onDataRadioChange}\n          value={dataRadioValue}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n        {dataRadioValue === 'Table' ? (\n          <TableView style={{ padding: 20 }} tableWidth={400} data={data} s2Configs={{ adaptive: true }} />\n        ) : (\n          <JSONView json={data} />\n        )}\n      </>\n    );\n    const advicesMenu = (\n      <Menu onClick={this.onAdviceMenuClick} selectedKeys={[this.state.currentAdvice]}>\n        {(advices || []).map((item, index) => {\n          return <Menu.Item key={`${index}-${item.type}`}>{`${index}: ${item.type}`}</Menu.Item>;\n        })}\n      </Menu>\n    );\n\n    const advicesContent = (\n      <>\n        <Dropdown menu={advicesMenu} placement=\"bottomLeft\" trigger={['click']} disabled={!advices}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            {!advices ? 'no advice' : `Advice ${this.state.currentAdvice}`} <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <JSONView json={advices[currentAdvice]} />\n      </>\n    );\n\n    const specContent = <JSONView json={advices[currentAdvice].spec} />;\n\n    const plotContent = <ChartView chartRef={this.myRef} spec={advices[currentAdvice].spec} />;\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Data',\n        desc: 'Source data:',\n        content: dataContent,\n      },\n      {\n        title: 'Advices',\n        desc: 'Advices list recommended from data:',\n        content: advicesContent,\n      },\n      {\n        title: 'Spec',\n        desc: 'Pick an advice and get its specification.',\n        content: specContent,\n      },\n      {\n        title: 'Chart',\n        desc: 'Render chart with specification.',\n        content: plotContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Data to Advisor",zh:"从数据到 Advisor 推荐图表"},filename:"advisor-steps.jsx",isNew:!1},{id:"data-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/y7adoyPqC/data-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\n// usage\nconst myAdvisor = new Advisor();\nconst advices = myAdvisor.advise({ data: defaultData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Advisor",zh:"Advisor 基础用法"},filename:"data-advisor.jsx",isNew:!1},{id:"custom-ckb-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/F5LoluYAc/custom-ckb-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst trickyData = [\n  { nom1: 'A', nom2: 'apple', nom3: 'red' },\n  { nom1: 'B', nom2: 'banana', nom3: 'yellow' },\n  { nom1: 'C', nom2: 'carrot', nom3: 'orange' },\n];\n\n// custom chart\nconst triNominalChart = {\n  id: 'trinominal_chart',\n  name: 'TriNominal Chart',\n  alias: ['three cate chart'],\n  family: ['MultiNominalCharts'],\n  def: 'This chart takes three nominal fields for encoding.',\n  purpose: ['Comparison'],\n  coord: ['Cartesian2D'],\n  category: ['Statistic'],\n  shape: ['Square'],\n  dataPres: [{ minQty: 3, maxQty: 3, fieldConditions: ['Nominal'] }],\n  channel: ['Position', 'Color'],\n  recRate: 'Use with Caution',\n};\n\n// custom chart to spec logic\nconst toTriNominal = (data, dataProps) => {\n  const field4X = dataProps[0];\n  const field4Y = dataProps[1];\n  const field4Color = dataProps[2];\n\n  if (!field4X || !field4Y || !field4Color) return null;\n\n  const spec = {\n    basis: {\n      type: 'chart',\n    },\n    data: {\n      type: 'json-array',\n      values: data,\n    },\n    layer: [\n      {\n        mark: 'rect',\n        encoding: {\n          x: {\n            field: field4X.name,\n            type: 'nominal',\n          },\n          color: {\n            field: field4Color.name,\n            type: 'nominal',\n          },\n          y: {\n            field: field4Y.name,\n            type: 'nominal',\n          },\n        },\n      },\n    ],\n  };\n\n  return spec;\n};\n\ntriNominalChart.toSpec = toTriNominal;\n\n// custom CKB config\nconst myCKBCfg = {\n  include: ['line_chart', 'pie_chart'], // only include 2 of origin charts\n  custom: { trinominal_chart: triNominalChart }, // and a custom chart\n};\n\n// usage\nconst myAdvisor = new Advisor({ ckbCfg: myCKBCfg });\n\nconst advices = myAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom CKB for Advisor",zh:"定制 Advisor 所使用的 CKB"},filename:"custom-ckb-advisor.jsx",isNew:!1},{id:"custom-rules-advisor",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Y%24Mua0oHX/custom-rules-advisor.png",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { PagList, JSONView } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst trickyData = [\n  { price: 520, year: 2005 },\n  { price: 600, year: 2006 },\n  { price: 1500, year: 2007 },\n];\n\n// The data above should has a line chart as an advice.\n// But, assume we don't like any line chart with a 'year' field:\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myAdvisor = new Advisor({ ruleCfg: myRuleCfg });\n\nconst advices = myAdvisor.advise({ data: trickyData });\n\nconst App = () => (\n  <PagList\n    data={advices}\n    renderItem={(item) => <JSONView json={item} style={{ height: '100%' }} rjvConfigs={{ collapsed: 1 }} />}\n  />\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for Advisor",zh:"定制 Advisor 所使用的规则"},filename:"custom-rules-advisor.jsx",isNew:!1}],icon:"",id:"advisor-only",title:{en:"Advisor Only",zh:"仅使用 Advisor"},childrenKey:"demos",order:1},{demos:[{id:"linter-steps",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Gu8zDCffu/linter-steps.gif",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { JSONView, ChartView, LintCard, StepBar } from 'antv-site-demo-rc';\nimport { Advisor } from '@antv/ava';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { category: 'A', value: 4 },\n      { category: 'B', value: 6 },\n      { category: 'C', value: 10 },\n      { category: 'D', value: 3 },\n      { category: 'E', value: 7 },\n      { category: 'F', value: 8 },\n    ],\n  },\n  layer: [\n    {\n      mark: 'arc',\n      encoding: {\n        theta: { field: 'value', type: 'quantitative' },\n        color: {\n          field: 'category',\n          type: 'nominal',\n          scale: { range: ['#5b8ff9', '#753d91', '#b03c63', '#d5b471', '#4fb01f', '#608b7d'] },\n        },\n      },\n    },\n  ],\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentStep: 0,\n      spec: errorSpec,\n      problems: myAdvisor.lint({ spec: errorSpec }),\n    };\n\n    this.myRef = React.createRef();\n  }\n\n  onStepChange = (currentStep) => {\n    this.setState({ currentStep });\n  };\n\n  render() {\n    const { currentStep, spec, problems } = this.state;\n\n    const plotContent = <ChartView chartRef={this.myRef} spec={spec} />;\n\n    const specContent = <JSONView json={spec} />;\n\n    const problemContent = (\n      <>\n        <LintCard lintProblems={problems} />\n        <JSONView json={problems} />\n      </>\n    );\n\n    // manifest\n\n    const steps = [\n      {\n        title: 'Chart',\n        desc: 'The design of this chart has some flaws:',\n        content: plotContent,\n      },\n      {\n        title: 'Spec',\n        desc: 'You can get the specification of the chart if it is drawn with AntV.',\n        content: specContent,\n      },\n      {\n        title: 'Problems',\n        desc: 'Linter will show you the problems:',\n        content: problemContent,\n      },\n    ];\n\n    return (\n      <>\n        <StepBar current={currentStep} onChange={this.onStepChange} steps={steps} />\n\n        <p>{steps[currentStep].desc}</p>\n\n        <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n          {steps[currentStep].content}\n        </div>\n      </>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Existing Chart to Linter",zh:"给定图表到 Linter 进行优化"},filename:"linter-steps.jsx",isNew:!1},{id:"chart-linter",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/1bZn%26b5Os/chart-linter.gif",source:"import React, { useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, LintCard } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { category: 'A', value: 4 },\n      { category: 'B', value: 6 },\n      { category: 'C', value: 10 },\n      { category: 'D', value: 3 },\n      { category: 'E', value: 7 },\n      { category: 'F', value: 8 },\n    ],\n  },\n  layer: [\n    {\n      mark: 'arc',\n      encoding: {\n        theta: { field: 'value', type: 'quantitative' },\n        color: {\n          field: 'category',\n          type: 'nominal',\n          scale: { range: ['#5b8ff9', '#753d91', '#b03c63', '#d5b471', '#4fb01f', '#608b7d'] },\n        },\n      },\n    },\n  ],\n};\n\n// usage\nconst myAdvisor = new Advisor();\nconst problems = myAdvisor.lint({ spec: errorSpec });\n\nconst App = () => {\n  const myRef = useRef();\n  return (\n    <>\n      <LintCard lintProblems={problems} />\n      <ChartView chartRef={myRef} spec={errorSpec} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Linter",zh:"Linter 基础用法"},filename:"chart-linter.jsx",isNew:!1},{id:"custom-rules-linter",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/2Jjp04b6%26/custom-rules-linter.gif",source:"import React, { useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { ChartView, LintCard } from 'antv-site-demo-rc';\n// import\nimport { Advisor } from '@antv/ava';\n\n// contants\n\nconst iDontLikeSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { price: 520, year: 2005 },\n      { price: 600, year: 2006 },\n      { price: 1500, year: 2007 },\n    ],\n  },\n  layer: [\n    {\n      mark: {\n        type: 'line',\n      },\n      encoding: {\n        x: {\n          field: 'year',\n          type: 'temporal',\n        },\n        y: {\n          field: 'price',\n          type: 'quantitative',\n        },\n      },\n    },\n  ],\n};\n\n// custom rule\nconst myRule = {\n  id: 'no-line-chart-with-year',\n  type: 'HARD',\n  docs: {\n    lintText: \"We do not use line chart if there is any field named 'year'\",\n  },\n  trigger: (args) => {\n    const { chartType } = args;\n    return chartType === 'line_chart';\n  },\n  validator: (args) => {\n    let result = 1;\n    const { dataProps } = args;\n    const fieldNames = dataProps.map((prop) => prop.name);\n    if (fieldNames.includes('year')) {\n      result = 0;\n    }\n    return result;\n  },\n};\n\n// custom rule Config\nconst myRuleCfg = {\n  custom: {\n    'no-line-chart-with-year': myRule,\n  },\n};\n\n// usage\nconst myAdvisor = new Advisor(myRuleCfg);\n\nconst problems = myAdvisor.lint({ spec: iDontLikeSpec });\n\nconst App = () => {\n  const myRef = useRef();\n  return (\n    <>\n      <LintCard lintProblems={problems} />\n      <ChartView chartRef={myRef} spec={iDontLikeSpec} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom rules for Linter",zh:"定制 Linter 所使用的规则"},filename:"custom-rules-linter.jsx",isNew:!1},{id:"fixer",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/kOe0rIsAR7/basic-fixer.gif",source:"import React, { useState, useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Badge, Popover, Checkbox } from 'antd';\nimport { Advisor } from '@antv/ava';\nimport { ChartView } from 'antv-site-demo-rc';\n\nconst errorSpec = {\n  basis: {\n    type: 'chart',\n  },\n  data: {\n    type: 'json-array',\n    values: [\n      { type: 'furniture', sales: 38 },\n      { type: 'food', sales: 52 },\n      { type: 'fruit', sales: 61 },\n      { type: 'lights', sales: 145 },\n      { type: 'kitchen', sales: 48 },\n      { type: 'garden', sales: 38 },\n      { type: 'drink', sales: 38 },\n      { type: 'pets', sales: 38 },\n    ],\n  },\n  layer: [\n    {\n      mark: {\n        type: 'bar',\n      },\n      encoding: {\n        x: {\n          field: 'type',\n          type: 'nominal',\n        },\n        y: {\n          field: 'sales',\n          type: 'quantitative',\n          axis: {\n            min: 20,\n          },\n        },\n      },\n    },\n  ],\n};\n\nconst myAdvisor = new Advisor();\n\nconst App = () => {\n  const chartRef = useRef(null);\n\n  const [rules, setRules] = useState(myAdvisor.lint({ spec: errorSpec }));\n  const [spec, setSpec] = useState(errorSpec);\n\n  const checkFix = (e, checkedRuleId) => {\n    const { checked } = e.target;\n    setRules(\n      rules.map((rule) => {\n        if (rule.id === checkedRuleId) {\n          if (checked) {\n            setSpec({\n              ...spec,\n              ...rule.fix,\n            });\n          } else {\n            setSpec(errorSpec);\n          }\n\n          return {\n            ...rule,\n            checked,\n          };\n        }\n        return rule;\n      })\n    );\n  };\n\n  const renderLinter =\n    rules.length > 0 ? (\n      <div>\n        <h3>This chart has the following improvements</h3>\n        <ul>\n          {rules.map((rule) => (\n            <li key={rule.id}>\n              <div>{rule.docs.lintText}</div>\n              <div>\n                <Checkbox checked={rule.checked} onChange={(e) => checkFix(e, rule.id)}>\n                  {rule.docs.fixText}\n                </Checkbox>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ) : null;\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 8 }}>\n        <ChartView chartRef={chartRef} spec={spec} style={{ height: '300px' }} />\n      </div>\n      <div style={{ flex: 2 }}>\n        <Popover content={renderLinter} trigger=\"click\" placement=\"top\">\n          {rules.length > 0 ? (\n            <Badge count={rules.length} style={{ backgroundColor: '#873bf4', cursor: 'pointer' }} />\n          ) : (\n            <span>ChartLinter Loading...</span>\n          )}\n        </Popover>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Basic Fixer",zh:"Fixer 基础用法"},filename:"fixer.jsx",isNew:!1}],icon:"",id:"linter-only",title:{en:"Linter Only",zh:"仅使用 Linter"},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"lite-insight",title:{zh:"智能洞察（LiteInsight）",en:"LiteInsight"},examples:[{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/zt2jXO97%262/li-basic.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [data, setData] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getInsights(data);\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={loading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"基础用法",en:"Basic usage"},filename:"basic.jsx",isNew:!1},{id:"custom",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ixkElKx8UT/li-custom-measures.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [data, setData] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getInsights(data, {\n            // 取前10个洞察\n            // limit the result insights to only the top 20\n            limit: 10,\n            // 自定义指标字段\n            // custom measures\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 自定义维度字段\n            // custom dimensions\n            dimensions: ['country', 'year'],\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n      <p>{steps[currentStep].desc}</p>\n\n      <div className=\"steps-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={loading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义指标和维度",en:"Custom measures and dimensions"},filename:"custom.jsx",isNew:!1}],icon:"",id:"basic",title:{en:"Auto-Insights",zh:"自动洞察"},childrenKey:"demos",order:0},{demos:[{id:"index",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/FaGQ69%24bZ8/pipeline-mini.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { InsightCard, JSONView, TableView, StepBar } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [result, setResult] = useState({});\n  const [insightLoading, setInsightLoading] = useState(true);\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          setData(data);\n          const insightResult = getInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 洞察结果中会增加对应的可视化展示方案（基于g2plot）\n            // the corresponding visualization scheme will be added to the insight results (based on g2plot)\n            visualization: true,\n          });\n          setResult(insightResult);\n          setInsightLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  const dataContent = <TableView data={data} />;\n\n  const insightsContent = <JSONView json={result} rjvConfigs={{ collapsed: 2 }} />;\n\n  const plotContent = (\n    <div key=\"plot\" style={{ flex: 5, height: '100%' }}>\n      {result.insights &&\n        result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n    </div>\n  );\n\n  const steps = [\n    {\n      title: 'Data',\n      desc: 'Source data:',\n      content: dataContent,\n    },\n    {\n      title: 'Insights',\n      desc: 'Insights extracted from data:',\n      content: insightsContent,\n    },\n    {\n      title: 'Visualization',\n      desc: 'Represent insight with visualization.',\n      content: plotContent,\n    },\n  ];\n\n  return (\n    <>\n      <StepBar current={currentStep} onChange={setCurrentStep} steps={steps} />\n\n      <p>{steps[currentStep].desc}</p>\n\n      <div style={{ height: 'calc(100% - 80px)' }}>\n        <Spin spinning={insightLoading}>{steps[currentStep].content}</Spin>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"可视化数据洞察",en:"Data insights visualization"},filename:"index.jsx",isNew:!1}],icon:"",id:"visualization",title:{en:"Visualize Insights",zh:"可视化洞察"},childrenKey:"demos",order:1},{demos:[{id:"insight-type",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/vvRy2rN%24cO/li-custom-type.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 只提取categoryOutlier类型的洞察\n            // extract categoryOutlier\n            insightTypes: ['category_outlier'],\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.insights &&\n            result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义洞察类型",en:"Custom insight types"},filename:"insight-type.jsx",isNew:!1},{id:"impact",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/WZQxVppHR%26/li-impact-measure.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 自定义影响力（Impact）分数的计算指标\n            // set the measures of the impact score\n            impactMeasures: [\n              { field: 'life_expect', method: 'COUNT' },\n              { field: 'pop', method: 'COUNT' },\n              { field: 'fertility', method: 'COUNT' },\n            ],\n            // 自定义影响力（Impact）分数在洞察分数中的权重（0 ~ 1）\n            // adjust the calculation weight of the relevant factors (significance, impact) in the calculation of the insight score.\n            impactWeight: 0.5,\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.insights &&\n            result.insights.map((item, index) => <InsightCard key={index} insightInfo={item} height={400} />)}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自定义影响力指标和权重",en:"Custom Impact measures and weight"},filename:"impact.jsx",isNew:!1},{id:"homogeneous",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/onsB512jmI/li-homogeneous.gif",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin } from 'antd';\nimport { getInsights } from '@antv/ava';\nimport { InsightCard } from 'antv-site-demo-rc';\n\nconst App = () => {\n  const [result, setResult] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getMyInsights = async () => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            visualization: true,\n            // 开启共性/例外模式的提取\n            // enable the extraction of homogeneous data patterns\n            homogeneous: true,\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  };\n\n  useEffect(() => {\n    getMyInsights();\n  }, []);\n\n  return (\n    <>\n      <h2 style={{ borderBottom: '1px solid #e9e9e9' }}>Insight list</h2>\n      <Spin spinning={loading} style={{ marginTop: 80 }}>\n        <div style={{ width: '100%' }}>\n          {result.homogeneousInsights &&\n            result.homogeneousInsights.map((item, index) => (\n              <InsightCard key={index} insightInfo={item} height={400} />\n            ))}\n        </div>\n      </Spin>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"提取共性/例外模式",en:"Extract homogeneous data patterns"},filename:"homogeneous.jsx",isNew:!1}],icon:"",id:"custom",title:{en:"Advanced Usages",zh:"高级使用"},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"plugins",title:{zh:"插件",en:"Plugins"},examples:[{demos:[{id:"data-advisor",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*EJqOQr8DoLEAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { specToG2Plot } from '@antv/antv-spec';\nimport { colorSimulation, colorToHex, COLOR_BLINDNESS_SIMULATION_TYPES } from '@antv/smart-color';\nimport { Advisor } from '@antv/ava';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { year: '2007', sales: 28 },\n  { year: '2008', sales: 55 },\n  { year: '2009', sales: 43 },\n  { year: '2010', sales: 91 },\n  { year: '2011', sales: 81 },\n  { year: '2012', sales: 53 },\n  { year: '2013', sales: 19 },\n  { year: '2014', sales: 87 },\n  { year: '2015', sales: 52 },\n];\n\nconst initColor = {\n  model: 'rgb',\n  value: { r: 126, g: 63, b: 235 },\n};\n\nconst SIMULATION_TYPES = [...COLOR_BLINDNESS_SIMULATION_TYPES, 'grayscale'];\n\nconst initSimMethod = SIMULATION_TYPES[0];\n\nconst simulatedColor = colorSimulation(initColor, initSimMethod);\n\nconst themeColor = {\n  /**\n   * `primaryColor`: color in Hex string\n   * such as '#ff5733'\n   * specify color for ChartAdvisor\n   */\n  primaryColor: colorToHex(simulatedColor),\n};\n\nconst App = () => {\n  const currentAdvice = 0;\n  const advices = myAdvisor.advise({\n    data: defaultData,\n    options: {\n      theme: themeColor,\n    },\n  });\n\n  useEffect(() => {\n    if (advices[currentAdvice]) {\n      specToG2Plot(advices[currentAdvice].spec, document.getElementById('vis'));\n    }\n  }, []);\n\n  return (\n    <>\n      <p>Render chart with specified color theme.</p>\n\n      <div className=\"vis-content\" style={{ height: 'calc(100% - 80px)' }}>\n        <div id=\"vis\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Charts with specific color",zh:"指定颜色的图表推荐"},filename:"data-advisor.jsx",isNew:!1},{id:"auto-color",screenshot:"https://gw.alipayobjects.com/mdn/rms_fabca5/afts/img/A*c3fdQ5dW0YsAAAAAAAAAAAAAARQnAQ",source:"import React, { useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { specToG2Plot } from '@antv/antv-spec';\nimport { colorToHex } from '@antv/smart-color';\nimport { Advisor } from '@antv/ava';\n\nconst myAdvisor = new Advisor();\n\n// contants\n\nconst defaultData = [\n  { type: '石油', value: 1200 },\n  { type: '电子', value: 250 },\n  { type: '机械', value: 180 },\n  { type: '食物', value: 150 },\n  { type: '服饰', value: 100 },\n];\n\nconst initColor = {\n  model: 'rgb',\n  value: { r: 255, g: 36, b: 12 },\n};\n\nconst theme = {\n  primaryColor: colorToHex(initColor),\n};\n\n/**\n * `genType`: color generation type\n * options are listed as follows:\n * discrete types:\n * 'monochromatic', 'analogous'\n * '单色配色', '近似配色'\n * categorical types:\n * 'polychromatic', 'split-complementary', 'triadic', 'tetradic'\n * '多色', '补色分割', '三等分配色', '矩形配色'\n */\nconst genType = 'polychromatic';\n\n/**\n * `simType`: color simulation type\n * options are listed as follows:\n * 'normal', 'protanomaly', 'deuteranomaly', 'tritanomaly',\n * '正常', '红色弱', '绿色弱', '蓝色弱',\n * 'protanopia', 'deuteranopia', 'tritanopia',\n * '红色盲', '绿色盲', '蓝色盲',\n * 'achromatomaly', 'achromatopsia'\n * '全色弱', '全色盲'\n */\nconst simType = 'protanomaly';\n\nconst setColors = {\n  /**\n   * `themeColor`: color in Hex string\n   * such as '#ff5733'\n   * theme of SmartColor mode\n   * default is lite blue\n   */\n  themeColor: colorToHex(initColor),\n  /**\n   * `colorSchemeType`: color generation type\n   * contains discrete and categorical types\n   * default value is 'monochromatic' or 'polychromatic' based on data type\n   */\n  colorSchemeType: genType,\n  /**\n   * `simulationType`: color simulation type\n   * employed for color blindness and grayscale\n   * default value is 'normal'\n   */\n  simulationType: simType,\n};\n\nconst App = () => {\n  const currentAdvice = 0;\n  const advices = myAdvisor.advise({\n    data: defaultData,\n    options: {\n      theme,\n    },\n  });\n  const advicesWithColor = myAdvisor.advise({\n    data: defaultData,\n    /**\n     * `smartColor`: SmartColor mode on/off\n     * SmartColor mode contains default color options\n     */\n    smartColor: true,\n    /**\n     * `colorOptions`: SmartColor options\n     * This variable is optional for SmartColor mode\n     */\n    colorOptions: setColors,\n  });\n\n  useEffect(() => {\n    if (advices[currentAdvice]) {\n      specToG2Plot(advices[currentAdvice].spec, document.getElementById('init'));\n    }\n    if (advicesWithColor[currentAdvice]) {\n      specToG2Plot(advicesWithColor[currentAdvice].spec, document.getElementById('smart'));\n    }\n  }, []);\n\n  return (\n    <>\n      <p>Render chart with specified color theme.</p>\n\n      <div className=\"init-content\" style={{ height: 'calc(55% - 80px)' }}>\n        <div id=\"init\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n\n      <p>\n        Render chart with SmartColor using <b>{genType}</b> method for <b>{simType}</b> color blindness.\n      </p>\n\n      <div className=\"smart-content\" style={{ height: 'calc(55% - 80px)' }}>\n        <div id=\"smart\" key=\"plot\" style={{ flex: 5, height: '100%' }}></div>\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Charts with auto color",zh:"自动配色的图表推荐"},filename:"auto-color.jsx",isNew:!1}],icon:"",id:"smart-color",title:{en:"SmartColor Usage",zh:"智能配色使用"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"others",title:{zh:"其他",en:"Others"},examples:[{demos:[{id:"usage",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ObPIQYzZJU/thumbnails-usage.png",source:"/* eslint-disable quotes */\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport Thumbnails, { BAR_CHART } from '@antv/thumbnails';\n\nconst App = () => {\n  return (\n    <>\n      <code>{`<Thumbnail svg={svgCode} alt={name} width={200} />`}</code>\n      <div>\n        {Object.keys(Thumbnails)\n          .slice(0, 5)\n          .map((chart) => {\n            const { svgCode, name } = Thumbnails[chart];\n            return <Thumbnail key={chart} svg={svgCode} alt={name} width={200} />;\n          })}\n      </div>\n\n      <br />\n\n      <code>{`<Thumbnail chart={'pie_chart'} width=\"200\" />`}</code>\n      <div>\n        <Thumbnail chart={'pie_chart'} width=\"200\" />\n      </div>\n\n      <code>{`<Thumbnail svg={Thumbnails.radar_chart.svgCode} width=\"200\" />`}</code>\n      <div>\n        <Thumbnail svg={Thumbnails.radar_chart.svgCode} width=\"200\" />\n      </div>\n\n      <code>{`<img src={\\`data:image/svg+xml;utf8,\\${encodeURIComponent(BAR_CHART.svgCode)}\\`} />`}</code>\n      <div>\n        <img src={`data:image/svg+xml;utf8,${encodeURIComponent(BAR_CHART.svgCode)}`} width=\"200\" />\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Thumbnails Usage",zh:"Thumbnails 缩略图用法"},filename:"usage.jsx",isNew:!1},{id:"all",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/YQGTC0Zq%26t/thumbnails-viewall.gif",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Switch } from 'antd';\nimport insertCss from 'insert-css';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport Thumbnails from '@antv/thumbnails';\n\ninsertCss(`\n  .demo-thumbnails-all-grid {\n    width: 190px;\n    height: 190px;\n    display: inline-block;\n    margin: 6px 6px;\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 0px 4px 0px;\n  }\n\n  .demo-thumbnails-all-intro {\n    text-align: center;\n    height: 40px;\n    background: rgb(246, 246, 246);\n    padding: 2px 0;\n  }\n\n  .demo-thumbnails-all-intro h1 {\n    font-size: 12px;\n    height: 20px;\n    line-height: 20px;\n    color: rgb(74, 74, 74);\n    margin: 0;\n  }\n\n  .demo-thumbnails-all-intro h2 {\n    font-size: 10px;\n    height: 16px;\n    line-height: 16px;\n    font-style: italic;\n    color: rgba(74, 74, 74, 0.4);\n    margin: 0;\n  }\n\n  .demo-thumbnails-all-thumbnail {\n    text-align: center;\n  }\n\n  .demo-thumbnails-all-dark {\n    background-color: #262626;\n  }\n\n  .demo-thumbnails-all-thumbnail img {\n    margin: 4px;\n    width: 140px;\n    height: 140px;\n  }\n\n  .demo-thumbnails-all-thumbnail img.demo-thumbnails-all-hasBorder {\n    outline: 1px solid red;\n  }\n`);\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nclass App extends React.Component {\n  state = {\n    showImgBorder: false,\n    bgDarkMode: false,\n  };\n\n  onChange = () => {\n    const { showImgBorder } = this.state;\n\n    this.setState({\n      showImgBorder: !showImgBorder,\n    });\n  };\n\n  onBGChange = () => {\n    const { bgDarkMode } = this.state;\n\n    this.setState({\n      bgDarkMode: !bgDarkMode,\n    });\n  };\n\n  render() {\n    const { showImgBorder, bgDarkMode } = this.state;\n\n    const liItem = chartTypeList.map((item) => {\n      const { id, name } = Thumbnails[item];\n\n      return (\n        <div className=\"demo-thumbnails-all-grid\" key={id}>\n          <div className=\"demo-thumbnails-all-intro\">\n            <h1>{name}</h1>\n            <h2>{id}</h2>\n          </div>\n          <div className={`demo-thumbnails-all-thumbnail demo-thumbnails-all-${bgDarkMode ? 'dark' : 'light'}`}>\n            <Thumbnail chart={id} className={showImgBorder ? 'demo-thumbnails-all-hasBorder' : null} />\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div>\n        ChartBorder: <Switch onChange={this.onChange} size=\"small\" /> | DarkMode:{' '}\n        <Switch onChange={this.onBGChange} size=\"small\" />\n        <br />\n        {liItem}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"View All Thumbnails",zh:"Thumbnails 缩略图一览"},filename:"all.jsx",isNew:!1},{id:"select",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/zwo0GDlia6/thumbnails-select.gif",source:"import React from 'react';\n\nimport { CaretDownOutlined } from '@ant-design/icons';\nimport Thumbnails from '@antv/thumbnails';\nimport { Thumbnail } from '@antv/thumbnails-component';\nimport { Dropdown, Menu } from 'antd';\nimport ReactDOM from 'react-dom';\n\nconst chartTypeList = Object.keys(Thumbnails);\n\nclass App extends React.Component {\n  state = {\n    current: chartTypeList[0],\n  };\n\n  handleClick = (e) => {\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    const { current } = this.state;\n    const liItem = chartTypeList.map((item) => {\n      return <Menu.Item key={item}>{item}</Menu.Item>;\n    });\n    const menu = (\n      <Menu onClick={this.handleClick} selectedKeys={[this.state.current]}>\n        {liItem}\n      </Menu>\n    );\n\n    return (\n      <div>\n        <Thumbnail chart={current} width=\"200\" height=\"200\" />\n        <Dropdown menu={menu} placement=\"bottomLeft\" trigger={['click']}>\n          <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n            Select Chart Type <CaretDownOutlined />\n          </a>\n        </Dropdown>\n        <span> : {current}</span>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Select Chart by Thumbnails",zh:"通过缩略图选择图表"},filename:"select.jsx",isNew:!1}],icon:"",id:"thumbnails",title:{en:"Thumbnails",zh:"Thumbnails 缩略图"},childrenKey:"demos",order:0}],childrenKey:"examples"},{id:"ntv",title:{zh:"解读文本可视化（NTV）",en:"Narrative Text Vis (NTV)"},examples:[{demos:[{id:"basic",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*67I9SKDXqvgAAAAAAAAAAAAADi2DAQ/original",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { NarrativeTextVis } from '@antv/ava-react';\n\nimport type { NtvTypes } from '@antv/ava-react';\n\nconst spec: NtvTypes.NarrativeTextSpec = {\n  sections: [\n    {\n      paragraphs: [\n        {\n          type: 'normal',\n          phrases: [\n            { type: 'entity', value: 'DAU', metadata: { entityType: 'metric_name' } },\n            { type: 'text', value: ' ' },\n            { type: 'entity', value: '1.23亿', metadata: { entityType: 'metric_value', origin: 123077.34 } },\n            { type: 'text', value: '，环比昨日 ' },\n            { type: 'entity', value: '80万', metadata: { entityType: 'delta_value', assessment: 'positive' } },\n            { type: 'text', value: '（' },\n            { type: 'entity', value: '2.3%', metadata: { entityType: 'ratio_value', assessment: 'positive' } },\n            { type: 'text', value: '）。' },\n            { type: 'text', value: '最近 3 个动态 7 天' },\n            {\n              type: 'entity',\n              value: '趋势上涨',\n              metadata: {\n                entityType: 'trend_desc',\n                detail: [1, 2, 6, 18, 24, 48],\n              },\n            },\n            { type: 'text', value: '。' },\n            { type: 'text', value: '按垂直行业分：' },\n          ],\n        },\n        {\n          type: 'bullets',\n          isOrder: true,\n          bullets: [\n            ...[\n              ['数金服务', '3.23亿', '40.12%'],\n              ['民生服务', '1.23亿', '20.12%'],\n            ].map<NtvTypes.BulletItemSpec>((item) => ({\n              type: 'bullet-item',\n              phrases: [\n                { type: 'entity', value: item[0], metadata: { entityType: 'dim_value' } },\n                { type: 'text', value: ' ' },\n                { type: 'entity', value: item[1], metadata: { entityType: 'metric_value' } },\n                { type: 'text', value: '（占比 ' },\n                { type: 'entity', value: item[2], metadata: { entityType: 'proportion' } },\n                { type: 'text', value: ' ）。' },\n              ],\n            })),\n            {\n              type: 'bullet-item',\n              phrases: [{ type: 'text', value: '...' }],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nReactDOM.render(<NarrativeTextVis spec={spec} />, document.getElementById('container'));\n",title:{en:"Basic",zh:"基本示例"},filename:"basic.tsx",isNew:!1},{id:"entity-phrases",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*8ObFTp4TfOcAAAAAAAAAAAAADi2DAQ/original",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Descriptions } from 'antd';\nimport { NarrativeTextVis } from '@antv/ava-react';\n\nconst { Phrase } = NarrativeTextVis;\n\nconst App = () => (\n  <div style={{ marginBottom: 48 }}>\n    <Descriptions bordered column={2} size=\"small\">\n      <Descriptions.Item label=\"指标名 metric_name\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: 'DAU',\n            metadata: {\n              entityType: 'metric_name',\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"指标值 metric_value\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '90.1w',\n            metadata: {\n              entityType: 'metric_value',\n              origin: 901632.11,\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"其他指标 other_metric_value\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '30%',\n            metadata: {\n              entityType: 'other_metric_value',\n              origin: 0.30012,\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"差值 delta_value\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '100.33',\n            metadata: {\n              entityType: 'delta_value',\n              assessment: 'positive',\n              detail: ['120.12', '220.45'],\n              origin: 100.33456,\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"比率 ratio_value\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '30%',\n            metadata: {\n              entityType: 'ratio_value',\n              assessment: 'negative',\n              origin: 0.30012,\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"贡献度 contribute_ratio\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '20%',\n            metadata: {\n              entityType: 'contribute_ratio',\n              origin: 0.2000077,\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"趋势描述 trend_desc\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: 'periodic',\n            metadata: {\n              entityType: 'trend_desc',\n              detail: [\n                264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243, 226,\n                192,\n              ],\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"维度值 dim_value\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '北京',\n            metadata: {\n              entityType: 'dim_value',\n              detail: {\n                left: '城市',\n                op: '=',\n                right: '北京',\n              },\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"时间描述 time_desc\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '2021-10-11',\n            metadata: {\n              entityType: 'time_desc',\n            },\n          }}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item label=\"占比 proportion\">\n        <Phrase\n          spec={{\n            type: 'entity',\n            value: '30%',\n            metadata: {\n              entityType: 'proportion',\n              origin: 0.30012,\n            },\n          }}\n        />\n      </Descriptions.Item>\n    </Descriptions>\n  </div>\n);\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Entity Phrases",zh:"实体短语一览"},filename:"entity-phrases.tsx",isNew:!1},{id:"theme",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*MYGGTa9z2MEAAAAAAAAAAAAADmJ7AQ/original",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Form, Radio, Descriptions, Skeleton } from 'antd';\nimport { NarrativeTextVis } from '@antv/ava-react';\nimport insertCss from 'insert-css';\n\nimport type { NarrativeTextVisProps } from '@antv/ava-react';\n\ninsertCss(`\n  .ntv-dark-desc .ant-descriptions-item-label{\n    color: rgba(255, 255, 255, 0.45);\n  }\n\n  .ntv-dark-desc.ant-descriptions-bordered .ant-descriptions-item-label {\n    background-color: transparent;\n  }\n`);\n\nconst { Phrase } = NarrativeTextVis;\n\nconst themeOptions = ['light', 'dark'].map((item) => ({ label: item, value: item }));\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [theme, setTheme] = useState<NarrativeTextVisProps['theme']>('dark');\n  const [spec, setSpec] = useState({});\n\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/ava/ntv-booking.json')\n      .then((res) => res.json())\n      .then((res) => {\n        setSpec(res);\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <Form.Item label=\"theme\">\n        <Radio.Group\n          options={themeOptions}\n          value={theme}\n          onChange={(e) => setTheme(e.target.value)}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </Form.Item>\n      <div style={{ backgroundColor: theme === 'dark' ? '#000' : '#fff', padding: 24 }}>\n        <Descriptions className={theme === 'dark' ? 'ntv-dark-desc' : ''} bordered column={2} size=\"small\">\n          <Descriptions.Item label=\"指标名 metric_name\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: 'DAU',\n                metadata: {\n                  entityType: 'metric_name',\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"指标值 metric_value\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '90.1w',\n                metadata: {\n                  entityType: 'metric_value',\n                  origin: 901632.11,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"其他指标 other_metric_value\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '30%',\n                metadata: {\n                  entityType: 'other_metric_value',\n                  origin: 0.30012,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"差值 delta_value\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '100.33',\n                metadata: {\n                  entityType: 'delta_value',\n                  assessment: 'positive',\n                  detail: ['120.12', '220.45'],\n                  origin: 100.33456,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"比率 ratio_value\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '30%',\n                metadata: {\n                  entityType: 'ratio_value',\n                  assessment: 'negative',\n                  origin: 0.30012,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"贡献度 contribute_ratio\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '20%',\n                metadata: {\n                  entityType: 'contribute_ratio',\n                  origin: 0.2000077,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"趋势描述 trend_desc\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: 'periodic',\n                metadata: {\n                  entityType: 'trend_desc',\n                  detail: [\n                    264, 417, 438, 887, 309, 397, 550, 575, 563, 430, 525, 592, 492, 467, 513, 546, 983, 340, 539, 243,\n                    226, 192,\n                  ],\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"维度值 dim_value\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '北京',\n                metadata: {\n                  entityType: 'dim_value',\n                  detail: {\n                    left: '城市',\n                    op: '=',\n                    right: '北京',\n                  },\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"时间描述 time_desc\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '2021-10-11',\n                metadata: {\n                  entityType: 'time_desc',\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"占比 proportion\">\n            <Phrase\n              spec={{\n                type: 'entity',\n                value: '30%',\n                metadata: {\n                  entityType: 'proportion',\n                  origin: 0.30012,\n                },\n              }}\n              theme={theme}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n        {loading ? <Skeleton active /> : <NarrativeTextVis spec={spec} theme={theme} />}\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Theme",zh:"主题色"},filename:"theme.tsx",isNew:!1},{id:"size",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*JwKTT5EGpREAAAAAAAAAAAAADi2DAQ/original",source:"import React, { useState } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Form, Radio } from 'antd';\nimport { NarrativeTextVis } from '@antv/ava-react';\n\nimport type { NtvTypes, NarrativeTextVisProps } from '@antv/ava-react';\n\nconst spec: NtvTypes.NarrativeTextSpec = {\n  sections: [\n    {\n      paragraphs: [\n        {\n          type: 'normal',\n          phrases: [\n            { type: 'entity', value: 'DAU', metadata: { entityType: 'metric_name' } },\n            { type: 'text', value: ' ' },\n            { type: 'entity', value: '1.23亿', metadata: { entityType: 'metric_value', origin: 123077.34 } },\n            { type: 'text', value: '，环比昨日 ' },\n            { type: 'entity', value: '80万', metadata: { entityType: 'delta_value', assessment: 'positive' } },\n            { type: 'text', value: '（' },\n            { type: 'entity', value: '2.3%', metadata: { entityType: 'ratio_value', assessment: 'positive' } },\n            { type: 'text', value: '）。' },\n            { type: 'text', value: '最近 3 个动态 7 天' },\n            {\n              type: 'entity',\n              value: '趋势上涨',\n              metadata: {\n                entityType: 'trend_desc',\n                detail: [1, 2, 6, 18, 24, 48],\n              },\n            },\n            { type: 'text', value: '。' },\n            { type: 'text', value: '按垂直行业分：' },\n          ],\n        },\n        {\n          type: 'bullets',\n          isOrder: true,\n          bullets: [\n            ...[\n              ['数金服务', '3.23亿', '40.12%'],\n              ['民生服务', '1.23亿', '20.12%'],\n            ].map<NtvTypes.BulletItemSpec>((item) => ({\n              type: 'bullet-item',\n              phrases: [\n                { type: 'entity', value: item[0], metadata: { entityType: 'dim_value' } },\n                { type: 'text', value: ' ' },\n                { type: 'entity', value: item[1], metadata: { entityType: 'metric_value' } },\n                { type: 'text', value: '（占比 ' },\n                { type: 'entity', value: item[2], metadata: { entityType: 'proportion' } },\n                { type: 'text', value: ' ）。' },\n              ],\n            })),\n            {\n              type: 'bullet-item',\n              phrases: [{ type: 'text', value: '...' }],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst sizeOptions = ['small', 'normal'].map((item) => ({ label: item, value: item }));\n\nconst App = () => {\n  const [size, setSize] = useState<NarrativeTextVisProps['size']>('small');\n  return (\n    <>\n      <Form.Item label=\"size\">\n        <Radio.Group\n          options={sizeOptions}\n          value={size}\n          onChange={(e) => setSize(e.target.value)}\n          optionType=\"button\"\n          buttonStyle=\"solid\"\n        />\n      </Form.Item>\n      <NarrativeTextVis spec={spec} size={size} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Size",zh:"设置大小"},filename:"size.tsx",isNew:!1},{id:"export",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*7XxYQLKmMr8AAAAAAAAAAAAADmJ7AQ/original",source:"import React, { useState, useEffect, useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Space, Button, message } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\nimport copy from 'copy-to-clipboard';\nimport { NarrativeTextVis, TextExporter, createRatioValue, createDeltaValue, copyToClipboard } from '@antv/ava-react';\n\nconst exporter = new TextExporter();\n\nfunction getSignAssessmentText(value, metadata) {\n  if (metadata?.assessment === 'negative') return `-${value}`;\n  return `${metadata?.assessment === 'positive' ? '+' : ''}${value}`;\n}\n\nconst exportWithSign = new TextExporter([\n  createRatioValue({ getText: getSignAssessmentText }),\n  createDeltaValue({ getText: getSignAssessmentText }),\n]);\n\nconst App = () => {\n  const containerRef = useRef();\n  const [booking, setSpec] = useState({});\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/ava/ntv-booking.json')\n      .then((res) => res.json())\n      .then(setSpec);\n  }, []);\n  const onCopySuccess = () => {\n    message.success('复制成功');\n  };\n  const onClickCopyButton = async () => {\n    const html = await exporter.getNarrativeHtml(containerRef.current);\n    const plainText = exporter.getNarrativeText(booking);\n    copyToClipboard(html, plainText, onCopySuccess);\n  };\n  return (\n    <div ref={containerRef}>\n      <Space>\n        <Button\n          icon={<CopyOutlined />}\n          onClick={() => {\n            const res = copy(exporter.getNarrativeText(booking));\n            if (res) message.success('复制成功');\n          }}\n        >\n          复制默认文本\n        </Button>\n        <Button\n          icon={<CopyOutlined />}\n          onClick={() => {\n            const res = copy(exportWithSign.getNarrativeText(booking));\n            if (res) message.success('复制成功');\n          }}\n        >\n          复制带正号的文本\n        </Button>\n        <Button type=\"primary\" icon={<CopyOutlined />} onClick={onClickCopyButton}>\n          复制富文本\n        </Button>\n      </Space>\n      <NarrativeTextVis spec={booking} onCopySuccess={onCopySuccess} />\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Export",zh:"导出"},filename:"export.tsx",isNew:!1}],icon:"",id:"basic",title:{en:"NTV Basic Usage",zh:"NTV 基本用法"},childrenKey:"demos",order:0},{demos:[{id:"phrase",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*IXhfQ41Sz44AAAAAAAAAAAAADi2DAQ/original",source:"import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Tooltip } from 'antd';\nimport { NarrativeTextVis, NtvPluginManager, createMetricName, createCustomPhraseFactory } from '@antv/ava-react';\n\nimport type { NtvTypes } from '@antv/ava-react';\n\nconst textSpec: NtvTypes.NarrativeTextSpec = {\n  sections: [\n    {\n      paragraphs: [\n        {\n          type: 'normal',\n          phrases: [\n            { type: 'text', value: '场景建议排序' },\n            {\n              type: 'custom',\n              value: '场景A-xxx',\n              metadata: {\n                customType: 'scenes',\n                level: 1,\n                desc: '',\n                owner: '张三',\n                scenesType: '最佳情景',\n              },\n            },\n            {\n              type: 'custom',\n              value: '场景B-yyy',\n              metadata: {\n                customType: 'scenes',\n                level: 2,\n              },\n            },\n            {\n              type: 'custom',\n              value: '场景C-zzz',\n              metadata: {\n                customType: 'scenes',\n                level: 3,\n              },\n            },\n          ],\n        },\n        {\n          type: 'bullets',\n          isOrder: true,\n          bullets: [\n            {\n              type: 'bullet-item',\n              phrases: [\n                { type: 'text', value: '从整体看，有' },\n                {\n                  type: 'custom',\n                  value: '1',\n                  metadata: {\n                    customType: 'anomaly',\n                  },\n                },\n                { type: 'text', value: '个异常指标' },\n              ],\n            },\n            {\n              type: 'bullet-item',\n              phrases: [\n                { type: 'text', value: '从' },\n                {\n                  type: 'entity',\n                  value: '公司数',\n                  metadata: {\n                    entityType: 'metric_name',\n                  },\n                },\n                { type: 'text', value: '上看，' },\n                {\n                  type: 'custom',\n                  value: '场景B-yyy',\n                  metadata: {\n                    customType: 'scenes',\n                    level: 2,\n                  },\n                },\n                {\n                  type: 'custom',\n                  value: '8.1',\n                  metadata: {\n                    customType: 'anomaly',\n                  },\n                },\n                { type: 'text', value: '低于标准，' },\n                {\n                  type: 'custom',\n                  value: '场景C-zzz',\n                  metadata: {\n                    customType: 'scenes',\n                    level: 3,\n                  },\n                },\n                {\n                  type: 'custom',\n                  value: '9.3%',\n                  metadata: {\n                    customType: 'percent',\n                  },\n                },\n                { type: 'text', value: '表现良好' },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst plugins = [\n  // 修改指标名的显示逻辑\n  createMetricName({\n    encoding: {\n      bgColor: '#F8FAFC',\n      color: '#424241',\n      fontWeight: 600,\n    },\n    style: {\n      padding: '0 6px',\n    },\n  }),\n  createCustomPhraseFactory({\n    key: 'anomaly',\n    style: {\n      backgroundColor: '#FEF5EF',\n      color: '#D80D0B',\n      padding: '0px 6px',\n      margin: '0 4px',\n    },\n  }),\n  createCustomPhraseFactory({\n    key: 'percent',\n    style: {\n      backgroundColor: '#E6F6FF',\n      color: '#2695FF',\n      padding: '0px 6px',\n      margin: '0 4px',\n    },\n  }),\n  createCustomPhraseFactory({\n    key: 'scenes',\n    overwrite: (node, value, metadata) => {\n      const content = (\n        <span\n          style={{\n            margin: '0 2px',\n            padding: '0px 6px',\n            backgroundColor: '#F8F9F2',\n          }}\n        >\n          {metadata?.level} {value}\n        </span>\n      );\n      if (metadata?.scenesType) {\n        return <Tooltip title={metadata?.scenesType}>{content}</Tooltip>;\n      }\n      return content;\n    },\n  }),\n];\n\nconst pluginManager = new NtvPluginManager(plugins);\n\nconst App = () => {\n  return (\n    <>\n      <NarrativeTextVis spec={textSpec} pluginManager={pluginManager} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom Phrases",zh:"自定义短语"},filename:"phrase.tsx",isNew:!1},{id:"block",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*H8hzQo2NAHMAAAAAAAAAAAAADi2DAQ/original",source:"import React, { useRef, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Line } from '@antv/g2plot';\nimport { NarrativeTextVis, NtvPluginManager, createCustomBlockFactory } from '@antv/ava-react';\n\nimport type { NtvTypes } from '@antv/ava-react';\n\nconst SALES_BY_AREA = [\n  { month: '2020-01', value: 2681567, count: 1 },\n  { month: '2020-02', value: 4137415, count: 1234 },\n  { month: '2020-03', value: 4684506 },\n  { month: '2020-04', value: 2447301 },\n  { month: '2020-05', value: 815039 },\n  { month: '2020-06', value: 1303124 },\n];\n\nconst textSpec: NtvTypes.NarrativeTextSpec = {\n  sections: [\n    {\n      paragraphs: [\n        {\n          type: 'normal',\n          phrases: [\n            { type: 'entity', value: '销量', metadata: { entityType: 'metric_name' } },\n            { type: 'text', value: ' ' },\n            { type: 'entity', value: '1.23亿', metadata: { entityType: 'metric_value' } },\n            { type: 'text', value: '，环比昨日' },\n            {\n              type: 'entity',\n              value: '50万',\n              metadata: { entityType: 'delta_value', assessment: 'positive' },\n            },\n            { type: 'text', value: '。' },\n          ],\n          styles: {\n            marginBottom: 24,\n          },\n        },\n        {\n          customType: 'line',\n          value: {\n            data: SALES_BY_AREA,\n            padding: 'auto',\n            xField: 'month',\n            yField: 'value',\n          },\n        },\n      ],\n    },\n  ],\n};\n\nconst LineChart = ({ config }) => {\n  const container = useRef();\n  useEffect(() => {\n    if (container.current) {\n      const line = new Line(container.current, config);\n      line.render();\n    }\n  }, [config]);\n  return <div ref={container}></div>;\n};\n\nconst pluginManager = new NtvPluginManager([\n  createCustomBlockFactory({\n    key: 'line',\n    render(metadata) {\n      if (metadata?.value) return <LineChart config={metadata.value}></LineChart>;\n      return null;\n    },\n  }),\n]);\n\nconst App = () => {\n  return (\n    <>\n      <NarrativeTextVis spec={textSpec} pluginManager={pluginManager} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Custom Block",zh:"自定义区块"},filename:"block.tsx",isNew:!1}],icon:"",id:"custom",title:{en:"NTV Custom",zh:"NTV 自定义扩展"},childrenKey:"demos",order:1},{demos:[{id:"coordinated-chart",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*Nut_S6vkJkEAAAAAAAAAAAAADi2DAQ/original",source:"import React, { useRef, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Pie } from '@antv/g2plot';\nimport { NarrativeTextVis } from '@antv/ava-react';\nimport { get } from 'lodash';\nimport insertCss from 'insert-css';\n\nimport type { NtvTypes } from '@antv/ava-react';\n\ninsertCss(`\n  .hover-g2plot-pie {\n    cursor: pointer;\n    margin-bottom: 2px;\n  }\n  .hover-g2plot-pie:hover {\n    background-color: #EEF7FF;\n  }\n`);\n\nconst data = [\n  { city: '北京', mau: 1000, rc: +0.12 },\n  { city: '上海', mau: 800, rc: -0.22 },\n  { city: '广州', mau: 600, rc: +0.02 },\n];\n\nconst textSpec: NtvTypes.NarrativeTextSpec = {\n  sections: [\n    {\n      paragraphs: [\n        {\n          type: 'normal',\n          phrases: [{ type: 'text', value: '各城市数据表现是:' }],\n        },\n        {\n          type: 'bullets',\n          isOrder: true,\n          bullets: data.map((item) => ({\n            type: 'bullet-item',\n            className: 'hover-g2plot-pie',\n            phrases: [\n              { type: 'entity', value: item.city, metadata: { entityType: 'dim_value' } },\n              { type: 'text', value: ' 的 ' },\n              { type: 'entity', value: 'MAU', metadata: { entityType: 'metric_name' } },\n              { type: 'text', value: ' 是 ' },\n              { type: 'entity', value: `${item.mau}`, metadata: { entityType: 'metric_value' } },\n              { type: 'text', value: ' 环比 ' },\n              {\n                type: 'entity',\n                value: `${Math.abs(item.rc) * 100}%`,\n                metadata: { entityType: 'ratio_value', assessment: item.rc > 0 ? 'positive' : 'negative' },\n              },\n              { type: 'text', value: '。' },\n            ],\n          })),\n        },\n      ],\n    },\n  ],\n};\n\nconst App = () => {\n  const chartContainerRef = useRef();\n  const chartRef = useRef<Pie>();\n\n  useEffect(() => {\n    if (chartContainerRef.current) {\n      chartRef.current = new Pie(chartContainerRef.current, {\n        data,\n        angleField: 'mau',\n        colorField: 'city',\n        padding: 20,\n      });\n      chartRef.current.render();\n    }\n  }, []);\n\n  const onMouseEnterParagraph = (spec) => {\n    if (chartRef.current) {\n      const type = get(spec, 'phrases[0].value');\n      chartRef.current.setState('selected', (datum: any) => datum.city === type);\n      chartRef.current.setState('selected', (datum: any) => datum.city !== type, false);\n    }\n  };\n  const onMouseLeaveParagraph = () => {\n    if (chartRef.current) {\n      chartRef.current.setState('selected', () => true, false);\n    }\n  };\n  return (\n    <>\n      <NarrativeTextVis\n        spec={textSpec}\n        onMouseEnterParagraph={onMouseEnterParagraph}\n        onMouseLeaveParagraph={onMouseLeaveParagraph}\n      />\n      <div ref={chartContainerRef}></div>\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Coordinated with Chart",zh:"图文联动"},filename:"coordinated-chart.tsx",isNew:!1},{id:"analysis",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*tUMpTIzwLeMAAAAAAAAAAAAADi2DAQ/original",source:"import React, { useState, useEffect, useCallback, useRef } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Spin, DatePicker, Select, message, Input } from 'antd';\nimport { RedditOutlined } from '@ant-design/icons';\nimport * as Charts from '@antv/g2plot';\nimport {\n  NarrativeTextVis,\n  NtvPluginManager,\n  createCustomPhraseFactory,\n  createCustomBlockFactory,\n} from '@antv/ava-react';\nimport { isEqual } from 'lodash';\nimport moment from 'moment';\nimport Mock from 'mockjs';\n\nimport type { Plot } from '@antv/g2plot';\nimport type { NtvTypes } from '@antv/ava-react';\n\nconst DATE_FORMAT = 'YYYY.MM.DD';\nconst mockData = Array.from({ length: 100 }, (v, i) => ({\n  date: moment().subtract(i, 'day').format(DATE_FORMAT),\n  gmv: Mock.mock('@float(10, 100, 2, 2)'),\n}));\n\n// 模拟后端请求返回数据\nfunction fetchData(compareDate = moment().subtract(1, 'week').format(DATE_FORMAT)) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const baseData = mockData[0];\n      const compareData = mockData.find((item) => item.date === compareDate);\n      const deltaValue = baseData.gmv - compareData.gmv;\n      const ratioValue = deltaValue / baseData.gmv;\n      function getAssessment(value) {\n        return value > 0 ? 'positive' : 'negative';\n      }\n      resolve({\n        sections: [\n          {\n            key: 'insight',\n            paragraphs: [\n              {\n                type: 'normal',\n                key: 'explain',\n                phrases: [\n                  { type: 'text', value: '当日 ' },\n                  { type: 'entity', value: baseData.date, metadata: { entityType: 'time_desc' } },\n                  { type: 'text', value: ' ' },\n                  { type: 'entity', value: 'GMV', metadata: { entityType: 'metric_name' } },\n                  { type: 'text', value: ' ' },\n                  { type: 'entity', value: `${baseData.gmv} 万`, metadata: { entityType: 'metric_value' } },\n                  { type: 'text', value: '，对比基准日期' },\n                  {\n                    type: 'custom',\n                    value: compareDate,\n                    metadata: {\n                      customType: 'compare_date',\n                      // 服务端告诉客户端只允许用户选择的时间范围\n                      allowRange: [0, 30],\n                    },\n                  },\n                  {\n                    type: 'entity',\n                    value: `${Math.abs(deltaValue).toFixed(2)} 万`,\n                    metadata: { entityType: 'delta_value', assessment: getAssessment(deltaValue) },\n                  },\n                  { type: 'text', value: '（' },\n                  {\n                    type: 'entity',\n                    value: `${(Math.abs(ratioValue) * 100).toFixed(2)}%`,\n                    metadata: { entityType: 'ratio_value', assessment: getAssessment(ratioValue) },\n                  },\n                  { type: 'text', value: '）' },\n                  { type: 'text', value: deltaValue > 0 ? '增加 ' : '减少 ' },\n                  {\n                    type: 'custom',\n                    value: '',\n                    metadata: { customType: 'gmv_trend_desc', options: ['明显', '平缓', '可忽略不计'] },\n                  },\n                  { type: 'text', value: '。主要影响因素是：' },\n                  {\n                    type: 'custom',\n                    value: Mock.mock('@csentence(10, 20)'),\n                    metadata: { customType: 'gmv_insight' },\n                  },\n                ],\n              },\n              {\n                customType: 'plot',\n                key: 'plot',\n                // 服务端告诉前端可选的图表类型范围，用于切换\n                chartTypes: ['Line', 'Scatter'],\n                data: mockData,\n              },\n            ],\n          },\n        ],\n      });\n    }, 500);\n  });\n}\n\nconst Chart = ({ chartTypes, config }) => {\n  const container = useRef();\n  const plot = useRef<Plot<any>>();\n  const prevConfig = useRef(config);\n  const [chatType, setChartType] = useState(chartTypes[0]);\n\n  useEffect(() => {\n    if (container.current) {\n      // 在局部刷新机制下，判断如果有 plot 需要比对 config 然后进行销毁\n      if (plot.current) {\n        if (isEqual(prevConfig.current, config)) return;\n        plot?.current?.destroy();\n      }\n      plot.current = new Charts[chatType](container.current, config);\n      prevConfig.current = config;\n      plot.current.render();\n    }\n  }, [config]);\n\n  // 如果是图表类型变化，必然重新渲染\n  useEffect(() => {\n    if (plot.current) plot?.current?.destroy();\n    if (container.current) {\n      plot.current = new Charts[chatType](container.current, config);\n      plot.current.render();\n    }\n  }, [chatType]);\n\n  return (\n    <>\n      <div style={{ textAlign: 'right', marginBottom: 12 }}>\n        <Select\n          bordered={false}\n          value={chatType}\n          style={{ width: 100 }}\n          options={chartTypes.map((t) => ({ label: t, value: t }))}\n          onChange={(value) => {\n            setChartType(value);\n          }}\n        />\n      </div>\n      <div ref={container}></div>\n    </>\n  );\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [textSpec, setTextSpec] = useState<NtvTypes.NarrativeTextSpec>({});\n  const [pluginManager] = useState(new NtvPluginManager());\n\n  const getTextSpecFormServer = useCallback((compareDate?: string) => {\n    setLoading(true);\n    fetchData(compareDate).then((spec) => {\n      setTextSpec(spec);\n      setLoading(false);\n    });\n  }, []);\n\n  useEffect(() => {\n    getTextSpecFormServer();\n    pluginManager.registerAll([\n      createCustomBlockFactory({\n        key: 'plot',\n        render(metadata) {\n          return (\n            <Chart\n              chartTypes={metadata.chartTypes}\n              config={{\n                data: metadata.data,\n                padding: 'auto',\n                xField: 'date',\n                yField: 'gmv',\n              }}\n            />\n          );\n        },\n      }),\n      createCustomPhraseFactory({\n        key: 'compare_date',\n        overwrite: (node, value, metadata) => {\n          const disabledDate = (current) => {\n            if (!current) return false;\n            const { allowRange } = metadata;\n            return (\n              current > moment().subtract(allowRange[0], 'day').endOf('day') ||\n              current < moment().subtract(allowRange[1], 'day').endOf('day')\n            );\n          };\n          return (\n            // @ts-ignore\n            <DatePicker\n              style={{ width: '120px', textDecoration: 'underline' }}\n              size=\"small\"\n              disabledDate={disabledDate}\n              defaultValue={moment(value)}\n              format={`(${DATE_FORMAT})`}\n              onChange={(date) => getTextSpecFormServer(moment(date).format(DATE_FORMAT))}\n              bordered={false}\n            />\n          );\n        },\n      }),\n      createCustomPhraseFactory({\n        key: 'gmv_trend_desc',\n        overwrite: (node, value, metadata) => {\n          return (\n            <Select\n              size=\"small\"\n              style={{ padding: 0 }}\n              bordered={false}\n              options={metadata.options.map((t) => ({ label: t, value: t }))}\n              defaultValue={metadata.options[0]}\n              dropdownMatchSelectWidth={false}\n              onChange={(value) => {\n                message.info(`用户希望描述为 ${value}`);\n              }}\n            />\n          );\n        },\n      }),\n      createCustomPhraseFactory({\n        key: 'gmv_insight',\n        overwrite: (node, value) => {\n          return (\n            <Input\n              size=\"small\"\n              style={{ width: '200px', borderBottom: '1px dashed #ccc' }}\n              bordered={false}\n              defaultValue={value}\n              placeholder=\"请输入洞见\"\n              prefix={<RedditOutlined style={{ opacity: 0.45 }} />}\n            />\n          );\n        },\n      }),\n    ]);\n  }, [getTextSpecFormServer]);\n\n  return (\n    <Spin spinning={loading}>\n      <NarrativeTextVis spec={textSpec} pluginManager={pluginManager} />\n    </Spin>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Analysis with Text",zh:"分析交互"},filename:"analysis.tsx",isNew:!1}],icon:"",id:"interactive",title:{en:"NTV Interaction",zh:"NTV 交互"},childrenKey:"demos",order:2},{demos:[{id:"chart-explanation",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*K3EmTK-ywA0AAAAAAAAAAAAADi2DAQ/original",source:"import React, { useState, useEffect } from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Skeleton, Card } from 'antd';\nimport { PlotCard } from 'antv-site-demo-rc';\nimport { getInsights } from '@antv/ava';\nimport { NarrativeTextVis } from '@antv/ava-react';\n\nimport type { InsightTypes } from '@antv/ava';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState<InsightTypes.InsightsResult>();\n\n  useEffect(() => {\n    fetch('https://cdn.jsdelivr.net/npm/vega-datasets@2.2.0/data/gapminder.json')\n      .then((res) => res.json())\n      .then((data) => {\n        if (data) {\n          const insightResult = getInsights(data, {\n            limit: 10,\n            measures: [\n              { field: 'life_expect', method: 'MEAN' },\n              { field: 'pop', method: 'SUM' },\n              { field: 'fertility', method: 'MEAN' },\n            ],\n            // 洞察结果中会增加对应的可视化展示方案（基于g2plot）\n            // the corresponding visualization scheme will be added to the insight results (based on g2plot)\n            visualization: {\n              summaryType: 'schema',\n            },\n          });\n          setResult(insightResult);\n          setLoading(false);\n        }\n      });\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Skeleton />\n      ) : (\n        <>\n          {result?.insights &&\n            result?.insights.slice(0, 3).map((item, index) => {\n              const { data, visualizationSchemas } = item;\n              const { chartType, chartSchema, insightSummaries, caption } = visualizationSchemas[0];\n              return (\n                <Card key={index} style={{ marginBottom: 12 }}>\n                  <PlotCard chartType={chartType} data={data} caption={caption} schema={chartSchema} height={400} />\n                  {insightSummaries.map((summary, idx) => (\n                    <NarrativeTextVis.Paragraph key={idx} spec={{ type: 'normal', phrases: summary }} />\n                  ))}\n                </Card>\n              );\n            })}\n        </>\n      )}\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Chart Explanation",zh:"图表解读"},filename:"chart-explanation.tsx",isNew:!1},{id:"report",screenshot:"https://mdn.alipayobjects.com/huamei_vvq19s/afts/img/A*Kw1LQrr9slcAAAAAAAAAAAAADi2DAQ/original",source:"import React, { useState, useEffect } from 'react';\n\nimport { Skeleton } from 'antd';\nimport ReactDOM from 'react-dom';\nimport { NarrativeTextVis } from '@antv/ava-react';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [spec, setSpec] = useState({});\n  useEffect(() => {\n    fetch('https://assets.antv.antgroup.com/ava/ntv-report1.json')\n      .then((res) => res.json())\n      .then((res) => {\n        setSpec(res);\n        setLoading(false);\n      });\n  }, []);\n  return <>{loading ? <Skeleton active /> : <NarrativeTextVis spec={spec} />}</>;\n};\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{en:"Briefing",zh:"业务简报"},filename:"report.tsx",isNew:!1}],icon:"",id:"case",title:{en:"NTV Show Case",zh:"NTV 使用场景"},childrenKey:"demos",order:3}],childrenKey:"examples"}]}},children:n})}}}]);